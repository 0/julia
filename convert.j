## boolean conversions ##

convert(::Type{Bool}, x::Number) = (x!=0)

bool(x) = true
bool(x::Bool) = x
bool(x::Number) = convert(Bool, x)

## integer conversions ##

convert(::Type{Int8}, x::Bool   ) = boxsi8(unbox8(x))
convert(::Type{Int8}, x::Uint8  ) = boxsi8(unbox8(x))
convert(::Type{Int8}, x::Int16  ) = boxsi8(trunc8(unbox16(x)))
convert(::Type{Int8}, x::Uint16 ) = boxsi8(trunc8(unbox16(x)))
convert(::Type{Int8}, x::Char   ) = boxsi8(trunc8(unbox32(x)))
convert(::Type{Int8}, x::Int32  ) = boxsi8(trunc8(unbox32(x)))
convert(::Type{Int8}, x::Uint32 ) = boxsi8(trunc8(unbox32(x)))
convert(::Type{Int8}, x::Int64  ) = boxsi8(trunc8(unbox64(x)))
convert(::Type{Int8}, x::Uint64 ) = boxsi8(trunc8(unbox64(x)))
convert(::Type{Int8}, x::Float32) = boxsi8(fptosi8(unbox32(x)))
convert(::Type{Int8}, x::Float64) = boxsi8(fptosi8(unbox64(x)))

convert(::Type{Uint8}, x::Bool   ) = boxui8(unbox8(x))
convert(::Type{Uint8}, x::Int8   ) = boxui8(unbox8(x))
convert(::Type{Uint8}, x::Int16  ) = boxui8(trunc8(unbox16(x)))
convert(::Type{Uint8}, x::Uint16 ) = boxui8(trunc8(unbox16(x)))
convert(::Type{Uint8}, x::Char   ) = boxui8(trunc8(unbox32(x)))
convert(::Type{Uint8}, x::Int32  ) = boxui8(trunc8(unbox32(x)))
convert(::Type{Uint8}, x::Uint32 ) = boxui8(trunc8(unbox32(x)))
convert(::Type{Uint8}, x::Int64  ) = boxui8(trunc8(unbox64(x)))
convert(::Type{Uint8}, x::Uint64 ) = boxui8(trunc8(unbox64(x)))
convert(::Type{Uint8}, x::Float32) = boxui8(fptoui8(unbox32(x)))
convert(::Type{Uint8}, x::Float64) = boxui8(fptoui8(unbox64(x)))

convert(::Type{Int16}, x::Bool   ) = boxsi16(sext16(unbox8(x)))
convert(::Type{Int16}, x::Int8   ) = boxsi16(sext16(unbox8(x)))
convert(::Type{Int16}, x::Uint8  ) = boxsi16(zext16(unbox8(x)))
convert(::Type{Int16}, x::Uint16 ) = boxsi16(unbox16(x))
convert(::Type{Int16}, x::Char   ) = boxsi16(trunc16(unbox32(x)))
convert(::Type{Int16}, x::Int32  ) = boxsi16(trunc16(unbox32(x)))
convert(::Type{Int16}, x::Uint32 ) = boxsi16(trunc16(unbox32(x)))
convert(::Type{Int16}, x::Int64  ) = boxsi16(trunc16(unbox64(x)))
convert(::Type{Int16}, x::Uint64 ) = boxsi16(trunc16(unbox64(x)))
convert(::Type{Int16}, x::Float32) = boxsi16(fptosi16(unbox32(x)))
convert(::Type{Int16}, x::Float64) = boxsi16(fptosi16(unbox64(x)))

convert(::Type{Uint16}, x::Bool   ) = boxui16(sext16(unbox8(x)))
convert(::Type{Uint16}, x::Int8   ) = boxui16(sext16(unbox8(x)))
convert(::Type{Uint16}, x::Uint8  ) = boxui16(zext16(unbox8(x)))
convert(::Type{Uint16}, x::Int16  ) = boxui16(unbox16(x))
convert(::Type{Uint16}, x::Char   ) = boxui16(trunc16(unbox32(x)))
convert(::Type{Uint16}, x::Int32  ) = boxui16(trunc16(unbox32(x)))
convert(::Type{Uint16}, x::Uint32 ) = boxui16(trunc16(unbox32(x)))
convert(::Type{Uint16}, x::Int64  ) = boxui16(trunc16(unbox64(x)))
convert(::Type{Uint16}, x::Uint64 ) = boxui16(trunc16(unbox64(x)))
convert(::Type{Uint16}, x::Float32) = boxui16(fptoui16(unbox32(x)))
convert(::Type{Uint16}, x::Float64) = boxui16(fptoui16(unbox64(x)))

convert(::Type{Char}, x::Bool   ) = box(Char,sext32(unbox8(x)))
convert(::Type{Char}, x::Int8   ) = box(Char,sext32(unbox8(x)))
convert(::Type{Char}, x::Uint8  ) = box(Char,zext32(unbox8(x)))
convert(::Type{Char}, x::Int16  ) = box(Char,sext32(unbox16(x)))
convert(::Type{Char}, x::Uint16 ) = box(Char,zext32(unbox16(x)))
convert(::Type{Char}, x::Int32  ) = box(Char,unbox32(x))
convert(::Type{Char}, x::Uint32 ) = box(Char,unbox32(x))
convert(::Type{Char}, x::Int64  ) = box(Char,trunc32(unbox64(x)))
convert(::Type{Char}, x::Uint64 ) = box(Char,trunc32(unbox64(x)))
convert(::Type{Char}, x::Float32) = box(Char,fptoui32(unbox32(x)))
convert(::Type{Char}, x::Float64) = box(Char,fptoui32(unbox64(x)))

convert(::Type{Int32}, x::Bool   ) = boxsi32(sext32(unbox8(x)))
convert(::Type{Int32}, x::Int8   ) = boxsi32(sext32(unbox8(x)))
convert(::Type{Int32}, x::Uint8  ) = boxsi32(zext32(unbox8(x)))
convert(::Type{Int32}, x::Int16  ) = boxsi32(sext32(unbox16(x)))
convert(::Type{Int32}, x::Uint16 ) = boxsi32(zext32(unbox16(x)))
convert(::Type{Int32}, x::Char   ) = boxsi32(unbox32(x))
convert(::Type{Int32}, x::Uint32 ) = boxsi32(unbox32(x))
convert(::Type{Int32}, x::Int64  ) = boxsi32(trunc32(unbox64(x)))
convert(::Type{Int32}, x::Uint64 ) = boxsi32(trunc32(unbox64(x)))
convert(::Type{Int32}, x::Float32) = boxsi32(fptosi32(unbox32(x)))
convert(::Type{Int32}, x::Float64) = boxsi32(fptosi32(unbox64(x)))

convert(::Type{Uint32}, x::Bool   ) = boxui32(sext32(unbox8(x)))
convert(::Type{Uint32}, x::Int8   ) = boxui32(sext32(unbox8(x)))
convert(::Type{Uint32}, x::Uint8  ) = boxui32(zext32(unbox8(x)))
convert(::Type{Uint32}, x::Int16  ) = boxui32(sext32(unbox16(x)))
convert(::Type{Uint32}, x::Uint16 ) = boxui32(zext32(unbox16(x)))
convert(::Type{Uint32}, x::Char   ) = boxui32(unbox32(x))
convert(::Type{Uint32}, x::Int32  ) = boxui32(unbox32(x))
convert(::Type{Uint32}, x::Int64  ) = boxui32(trunc32(unbox64(x)))
convert(::Type{Uint32}, x::Uint64 ) = boxui32(trunc32(unbox64(x)))
convert(::Type{Uint32}, x::Float32) = boxui32(fptoui32(unbox32(x)))
convert(::Type{Uint32}, x::Float64) = boxui32(fptoui32(unbox64(x)))

convert(::Type{Int64}, x::Bool   ) = boxsi64(sext64(unbox8(x)))
convert(::Type{Int64}, x::Int8   ) = boxsi64(sext64(unbox8(x)))
convert(::Type{Int64}, x::Uint8  ) = boxsi64(zext64(unbox8(x)))
convert(::Type{Int64}, x::Int16  ) = boxsi64(sext64(unbox16(x)))
convert(::Type{Int64}, x::Uint16 ) = boxsi64(zext64(unbox16(x)))
convert(::Type{Int64}, x::Char   ) = boxsi64(zext64(unbox32(x)))
convert(::Type{Int64}, x::Int32  ) = boxsi64(sext64(unbox32(x)))
convert(::Type{Int64}, x::Uint32 ) = boxsi64(zext64(unbox32(x)))
convert(::Type{Int64}, x::Uint64 ) = boxsi64(unbox64(x))
convert(::Type{Int64}, x::Float32) = boxsi64(fptosi64(unbox32(x)))
convert(::Type{Int64}, x::Float64) = boxsi64(fptosi64(unbox64(x)))

convert(::Type{Uint64}, x::Bool   ) = boxui64(sext64(unbox8(x)))
convert(::Type{Uint64}, x::Int8   ) = boxui64(sext64(unbox8(x)))
convert(::Type{Uint64}, x::Uint8  ) = boxui64(zext64(unbox8(x)))
convert(::Type{Uint64}, x::Int16  ) = boxui64(sext64(unbox16(x)))
convert(::Type{Uint64}, x::Uint16 ) = boxui64(zext64(unbox16(x)))
convert(::Type{Uint64}, x::Char   ) = boxui64(zext64(unbox32(x)))
convert(::Type{Uint64}, x::Int32  ) = boxui64(sext64(unbox32(x)))
convert(::Type{Uint64}, x::Uint32 ) = boxui64(zext64(unbox32(x)))
convert(::Type{Uint64}, x::Int64  ) = boxui64(unbox64(x))
convert(::Type{Uint64}, x::Float32) = boxui64(fptoui64(unbox32(x)))
convert(::Type{Uint64}, x::Float64) = boxui64(fptoui64(unbox64(x)))

bool  (x::Scalar) = convert(Bool,   x)
int8  (x::Scalar) = convert(Int8,   x)
uint8 (x::Scalar) = convert(Uint8,  x)
int16 (x::Scalar) = convert(Int16,  x)
uint16(x::Scalar) = convert(Uint16, x)
char  (x::Scalar) = convert(Char,   x)
int32 (x::Scalar) = convert(Int32,  x)
uint32(x::Scalar) = convert(Uint32, x)
int64 (x::Scalar) = convert(Int64,  x)
uint64(x::Scalar) = convert(Uint64, x)

truncate(x::Int) = x

## floating point conversions ##

convert(::Type{Float32}, x::Int8)    = boxf32(sitofp32(unbox8(x)))
convert(::Type{Float32}, x::Int16)   = boxf32(sitofp32(unbox16(x)))
convert(::Type{Float32}, x::Int32)   = boxf32(sitofp32(unbox32(x)))
convert(::Type{Float32}, x::Int64)   = boxf32(sitofp32(unbox64(x)))
convert(::Type{Float32}, x::Uint8)   = boxf32(uitofp32(unbox8(x)))
convert(::Type{Float32}, x::Uint16)  = boxf32(uitofp32(unbox16(x)))
convert(::Type{Float32}, x::Uint32)  = boxf32(uitofp32(unbox32(x)))
convert(::Type{Float32}, x::Char)    = boxf32(uitofp32(unbox32(x)))
convert(::Type{Float32}, x::Uint64)  = boxf32(uitofp32(unbox64(x)))
convert(::Type{Float32}, x::Float64) = boxf32(fptrunc32(unbox64(x)))

convert(::Type{Float64}, x::Int8)    = boxf64(sitofp64(unbox8(x)))
convert(::Type{Float64}, x::Int16)   = boxf64(sitofp64(unbox16(x)))
convert(::Type{Float64}, x::Int32)   = boxf64(sitofp64(unbox32(x)))
convert(::Type{Float64}, x::Int64)   = boxf64(sitofp64(unbox64(x)))
convert(::Type{Float64}, x::Uint8)   = boxf64(uitofp64(unbox8(x)))
convert(::Type{Float64}, x::Uint16)  = boxf64(uitofp64(unbox16(x)))
convert(::Type{Float64}, x::Uint32)  = boxf64(uitofp64(unbox32(x)))
convert(::Type{Float64}, x::Char)    = boxf64(uitofp64(unbox32(x)))
convert(::Type{Float64}, x::Uint64)  = boxf64(uitofp64(unbox64(x)))
convert(::Type{Float64}, x::Float32) = boxf64(fpext64(unbox32(x)))

float32(x::Scalar) = convert(Float32, x)
float64(x::Scalar) = convert(Float64, x)

truncate(x::Float32) = convert(Int32, x)
truncate(x::Float64) = convert(Int64, x)
