<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <title>Julia - A fresh approach to technical computing.</title>
        <link href="reset.css" rel="stylesheet" type="text/css" />
        <link href="styles.css" rel="stylesheet" type="text/css" />
        <link href="favicon.ico" rel="shortcut icon" />
        <link href="http://fonts.googleapis.com/css?family=Droid+Sans+Mono&v2" rel="stylesheet" type="text/css">
        <script type="text/javascript" src="jquery.js"></script>
        <script type="text/javascript" src="jquery.json.js"></script>
        <script type="text/javascript" src="jquery.autoresize.js"></script>
        <script type="text/javascript" src="d3.js"></script>
        <script>
            /*
                Some stuff to make the two columns extend to the footer.
            */

            // keep track of the minimum height of the content (the height of the longest column)
            var min_content_height;

            // set the outer height of an element or group of elements
            function set_outer_height(selector, height)
            {
                $(selector).height(0);
                $(selector).height(height-$(selector).outerHeight(true));
            }
            
            // this function makes all of the columns the same height
            function set_column_heights() {
                // set the height of all the columns to the height of the longest one
                set_outer_height("#left-column", min_content_height);
                set_outer_height("#right-column", min_content_height);
                set_outer_height("#main", min_content_height);
                
                // calculate how much taller the columns should be so the footer is at the bottom of the window
                var padding = Math.max($(window).height()-($("#footer-bar").offset().top+$("#footer-bar").outerHeight(true)), 0);
                
                // make the columns taller so the footer is on the bottom of the page
                set_outer_height("#left-column", min_content_height+padding);
                set_outer_height("#right-column", min_content_height+padding);
                set_outer_height("#main", min_content_height+padding);
                set_outer_height("#terminal-form", min_content_height+padding-40);
            }
            
            // called on page load
            window.onload = function() {
                // calculate the height of the longest column
                min_content_height = Math.max($("div#left-column").outerHeight(true), $("div#right-column").outerHeight(true));
                
                // set the height of the columns appropriately
                set_column_heights();
            };
            
            // set the window resize callback
            window.onresize = set_column_heights;
        </script>
        <script>
            /*
                Network Protol

                This needs to match the message
                types listed in message_types.h.
            */

            // input messages (to julia)
            var MSG_INPUT_NULL              = 0;
            var MSG_INPUT_START             = 1;
            var MSG_INPUT_POLL              = 2;
            var MSG_INPUT_EVAL              = 3;

            // output messages (to the browser)
            var MSG_OUTPUT_NULL             = 0;
            var MSG_OUTPUT_READY            = 1;
            var MSG_OUTPUT_MESSAGE          = 2;
            var MSG_OUTPUT_OTHER            = 3;
            var MSG_OUTPUT_FATAL_ERROR      = 4;
            var MSG_OUTPUT_PARSE_ERROR      = 5;
            var MSG_OUTPUT_PARSE_INCOMPLETE = 6;
            var MSG_OUTPUT_PARSE_COMPLETE   = 7;
            var MSG_OUTPUT_EVAL_RESULT      = 8;
            var MSG_OUTPUT_EVAL_ERROR       = 9;
            var MSG_OUTPUT_PLOT             = 10;
        </script>
        <script>
            /*
                REPL implementation.
            */

            // how long we delay in ms before polling the server again
            var poll_interval = 100;

            // keep track of terminal history
            var input_history = [];
            var input_history_current = [""];
            var input_history_id = 0;
            var input_history_size = 100;

            // a queue of messages to be sent to the server
            var outbox_queue = [];

            // keep track of whether we have received a fatal message
            var dead = false;

            // jQuery extension to insert text into an input/textarea at the cursor position
            // (used to indent when the user presses the tab key)
            jQuery.fn.extend({
                insertAtCaret: function(myValue)
                {
                    return this.each(function(i)
                    {
                        if (document.selection)
                        {
                            this.focus();
                            sel = document.selection.createRange();
                            sel.text = myValue;
                            this.focus();
                        }
                        else if (this.selectionStart || this.selectionStart == "0")
                        {
                            var startPos = this.selectionStart;
                            var endPos = this.selectionEnd;
                            var scrollTop = this.scrollTop;
                            this.value = this.value.substring(0, startPos)+myValue+this.value.substring(endPos, this.value.length);
                            this.focus();
                            this.selectionStart = startPos+myValue.length;
                            this.selectionEnd = startPos+myValue.length;
                            this.scrollTop = scrollTop;
                        }
                        else
                        {
                            this.value += myValue;
                            this.focus();
                        }
                    })
                }
            });

            // escape html
            function escape_html(str)
            {
                // escape ampersands, angle brackets, spaces, tabs, and newlines
                return str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/ /g, "&nbsp;").replace(/\t/g, "&nbsp;&nbsp;&nbsp;&nbsp;").replace(/\n/g, "<br />");
            }

            // add to the terminal
            function add_to_terminal(data)
            {
                // update the html
                $("#terminal").append(data);

                // resize the input box (the -1 is for Internet Explorer)
                // we do this here because a scrollbar might have appeared (which reduces the width of the terminal)
                $("#terminal-input").width($("#terminal").width()-$("#prompt").width()-1);

                // scroll to the new data
                $("#terminal-form").prop("scrollTop", $("#terminal-form").prop("scrollHeight"));
            }

            // the first request
            function init_session()
            {
                // send a start message
                outbox_queue.push([MSG_INPUT_START]);
                process_outbox();
            }

            // check the server for data
            function poll()
            {
                // send a poll message
                outbox_queue.push([MSG_INPUT_POLL]);
                process_outbox();
            }

            // send the next line in the queue
            function process_outbox()
            {
                if (outbox_queue.length > 0)
                    $.post("/repl.scgi", {"request": $.toJSON(outbox_queue)}, callback, "json");
                outbox_queue = [];
            }
            
            // called when the server has responded
            function callback(data, textStatus, jqXHR)
            {
                // if we are dead, don't keep polling the server
                if (dead)
                    return;

                for (id in data)
                {
                    // MSG_OUTPUT_NULL
                    if (data[id][0] == MSG_OUTPUT_NULL)
                    {
                        // do nothing
                    }

                    // MSG_OUTPUT_READY
                    if (data[id][0] == MSG_OUTPUT_READY)
                    {
                        // remove the initializing message
                        $("#terminal").html("");

                        // enable input
                        $("#prompt").show();
                        $("#terminal-input").removeAttr("disabled");
                        $("#terminal-input").show();
                        $("#terminal-input").focus();

                        // resize the input box (the -1 is for Internet Explorer)
                        $("#terminal-input").width($("#terminal").width()-$("#prompt").width()-1);
                    }

                    // MSG_OUTPUT_MESSA1E
                    if (data[id][0] == MSG_OUTPUT_MESSAGE)
                    {
                        add_to_terminal("<span class=\"message\">"+escape_html(data[id][1])+"</span><br /><br />");
                    }

                    // MSG_OUTPUT_OTHER
                    if (data[id][0] == MSG_OUTPUT_OTHER)
                    {
                        add_to_terminal(escape_html(data[id][1]));
                    }

                    // MSG_OUTPUT_FATAL_ERROR
                    if (data[id][0] == MSG_OUTPUT_FATAL_ERROR)
                    {
                        add_to_terminal("<span class=\"error\">"+escape_html(data[id][1])+"</span><br /><br />");
                        dead = true;
                        return;
                    }

                    // MSG_OUTPUT_PARSE_ERROR
                    if (data[id][0] == MSG_OUTPUT_PARSE_ERROR)
                    {
                        // print the error message
                        add_to_terminal("<span class=\"error\">"+escape_html(data[id][1])+"</span><br /><br />");

                        // get the input from form
                        var input = $("#terminal-input").val();

                        // input history
                        if (input.replace(/^\s+|\s+$/g, '') != "")
                            input_history.push(input);
                        if (input_history.length > input_history_size)
                            input_history = input_history.slice(input_history.length-input_history_size);
                        input_history_current = input_history.slice(0);
                        input_history_current.push("");
                        input_history_id = input_history_current.length-1;

                        // add the julia prompt and the input to the log
                        add_to_terminal("<span class=\"prompt\">julia&gt;&nbsp;</span>"+escape_html(input.replace(/\n/g, "\n       "))+"<br />");
                        
                        // clear the input field
                        $("#terminal-input").val("");

                        // re-enable the input field
                        $("#terminal-input").removeAttr("disabled");

                        // focus the input field
                        $("#terminal-input").focus();
                    }

                    // MSG_OUTPUT_PARSE_INCOMPLETE
                    if (data[id][0] == MSG_OUTPUT_PARSE_INCOMPLETE)
                    {
                        // re-enable the input field
                        $("#terminal-input").removeAttr("disabled");

                        // focus the input field
                        $("#terminal-input").focus();

                        // add a newline for the user
                        $("#terminal-input").insertAtCaret("\n");
                    }

                    // MSG_OUTPUT_PARSE_COMPLETE
                    if (data[id][0] == MSG_OUTPUT_PARSE_COMPLETE)
                    {
                        // get the input from form
                        var input = $("#terminal-input").val();

                        // input history
                        if (input.replace(/^\s+|\s+$/g, '') != "")
                            input_history.push(input);
                        if (input_history.length > input_history_size)
                            input_history = input_history.slice(input_history.length-input_history_size);
                        input_history_current = input_history.slice(0);
                        input_history_current.push("");
                        input_history_id = input_history_current.length-1;

                        // add the julia prompt and the input to the log
                        add_to_terminal("<span class=\"prompt\">julia&gt;&nbsp;</span>"+escape_html(input.replace(/\n/g, "\n       "))+"<br />");
                        
                        // clear the input field
                        $("#terminal-input").val("");

                        // hide the prompt until the result comes in
                        $("#prompt").hide();
                    }

                    // MSG_OUTPUT_EVAL_RESULT
                    if (data[id][0] == MSG_OUTPUT_EVAL_RESULT)
                    {
                        // print the result
                        if ($.trim(data[id][1]) == "")
                            add_to_terminal("<br />");
                        else
                            add_to_terminal(escape_html(data[id][1])+"<br /><br />");

                        // show the prompt
                        $("#prompt").show();

                        // re-enable the input field
                        $("#terminal-input").removeAttr("disabled");

                        // focus the input field
                        $("#terminal-input").focus();
                    }

                    // MSG_OUTPUT_EVAL_ERROR
                    if (data[id][0] == MSG_OUTPUT_EVAL_ERROR)
                    {
                        // print the error
                        add_to_terminal("<span class=\"error\">"+escape_html(data[id][1])+"</span><br /><br />");

                        // show the prompt
                        $("#prompt").show();

                        // re-enable the input field
                        $("#terminal-input").removeAttr("disabled");

                        // focus the input field
                        $("#terminal-input").focus();
                    }

                    // MSG_OUTPUT_PLOT
                    if (data[id][0] == MSG_OUTPUT_PLOT)
                    {
                        // line plot
                        if (data[id][1] == "line")
                        {
                            // get the data
                            var x_data = $.parseJSON(data[id][2]);
                            var y_data = $.parseJSON(data[id][3]);

                            // get the bounds on the data
                            var x_min = $.parseJSON(data[id][4]);
                            var x_max = $.parseJSON(data[id][5]);
                            var y_min = $.parseJSON(data[id][6]);
                            var y_max = $.parseJSON(data[id][7]);

                            // construct the data for D3
                            var data = d3.range(x_data.length).map(function(i) {
                                return {x: x_data[i], y: y_data[i]};
                            });

                            var w = 450,
                                h = 275,
                                p = 40,
                                x = d3.scale.linear().domain([x_min, x_max]).range([0, w]),
                                y = d3.scale.linear().domain([y_min-(y_max-y_min)*0.1, y_max+(y_max-y_min)*0.1]).range([h, 0]);

                            var vis = d3.select("#terminal")
                              .append("svg")
                                .data([data])
                                .attr("width", w+p*2)
                                .attr("height", h+p*2)
                              .append("g")
                                .attr("transform", "translate("+String(p)+","+String(p)+")");

                            var vrules = vis.selectAll("g.vrule")
                                .data(x.ticks(10))
                              .enter().append("g")
                                .attr("class", "vrule");

                            vrules.append("line")
                                .attr("x1", x)
                                .attr("x2", x)
                                .attr("y1", 0)
                                .attr("y2", h - 1);

                            vrules.append("text")
                                .attr("class", "ticktext")
                                .attr("x", x)
                                .attr("y", h + 10)
                                .attr("dy", ".71em")
                                .attr("text-anchor", "middle")
                                .text(x.tickFormat(10));

                            var hrules = vis.selectAll("g.hrule")
                                .data(y.ticks(8))
                              .enter().append("g")
                                .attr("class", "hrule");

                            hrules.append("line")
                                .attr("class", function(d) { return d ? null : "axis"; })
                                .attr("y1", y)
                                .attr("y2", y)
                                .attr("x1", 0)
                                .attr("x2", w + 1);

                            hrules.append("text")
                                .attr("class", "ticktext")
                                .attr("y", y)
                                .attr("x", -5)
                                .attr("dy", ".35em")
                                .attr("text-anchor", "end")
                                .text(y.tickFormat(10));

                            vis.append("path")
                                .attr("class", "line")
                                .attr("d", d3.svg.line()
                                .x(function(d) { return x(d.x); })
                                .y(function(d) { return y(d.y); }));
                            
                            // scroll to the new plot
                            $("#terminal-form").prop("scrollTop", $("#terminal-form").prop("scrollHeight"));
                        }
                    }
                }

                // send any remaining messages if there are any
                process_outbox();

                // poll the server again
                setTimeout(poll, poll_interval);
            }

            // called on page load
            $(document).ready(function()
            {
                // apply the autoresize plugin to the textarea
                $("#terminal-input").autoResize({ animate: false, maxHeight: 1000, onResize: function() { setTimeout(function() { $("#terminal-form").prop("scrollTop", $("#terminal-form").prop("scrollHeight")); }, 100); } });
                
                // hide the textarea in case the browser decides to pre-populate it
                $("#terminal-input").hide();

                // hook mouse click events
                $("#terminal-form").click(function(evt) { $("#terminal-input").focus(); } );

                // hook keyboard events for the input field
                $("#terminal-input").keydown(function(evt)
                {
                    // determine which key was pressed
                    switch (evt.keyCode)
                    {
                        case 9:
                            // user pressed the tab key
                            $("#terminal-input").insertAtCaret("    ");
                            $("#terminal-form").prop("scrollTop", $("#terminal-form").prop("scrollHeight"));
                            return false;

                        case 38:
                            // user pressed the up key
                            input_history_current[input_history_id] = $("#terminal-input").val();
                            input_history_id -= 1;
                            if (input_history_id < 0)
                                input_history_id = 0;
                            $("#terminal-input").val(input_history_current[input_history_id]);
                            $("#terminal-form").prop("scrollTop", $("#terminal-form").prop("scrollHeight"));
                            return false;

                        case 40:
                            // user pressed the down key
                            input_history_current[input_history_id] = $("#terminal-input").val();
                            input_history_id += 1;
                            if (input_history_id > input_history_current.length-1)
                                input_history_id = input_history_current.length-1;
                            $("#terminal-input").val(input_history_current[input_history_id]);
                            $("#terminal-form").prop("scrollTop", $("#terminal-form").prop("scrollHeight"));
                            return false;

                        case 13:
                            // user pressed the enter key
                            var input = $("#terminal-input").val();

                            // disable the terminal input and clear the input field later
                            $("#terminal-input").attr("disabled", "disabled");
                            
                            // send the input to the server via AJAX
                            outbox_queue.push([MSG_INPUT_EVAL, input]);
                            process_outbox();

                            // prevent the form from actually submitting
                            return false;
                    }
                });
                
                // scroll to the input field
                $("#terminal-form").prop("scrollTop", $("#terminal-form").prop("scrollHeight"));

                // start polling the server
                init_session();
            });
        </script>
    </head>
    <body>
        <div id="header-bar">
            <header>
                <a href="/"><img id="logo" src="images/logo.png" alt="Julia" /></a>
                <img id="slogan" src="images/slogan.png" alt="A fresh approach to technical computing" />
                <div class="float-clear"> </div>
            </header>
        </div>
        <div id="main">
            <div id="left-column">
                <a href="/" class="current-page"><img class="bullet" src="images/bullet.png" alt="" /> Interactive Prompt</a>
            </div>
            <div id="right-column">
                <form id="terminal-form">
                    <div id="terminal"><span class="message">&lt;initializing&gt;</span></div>
                    <div>
                        <div id="prompt">julia&gt;&nbsp;</div>
                        <textarea id="terminal-input" spellcheck="false" rows="1" cols="20" disabled="disabled" /></textarea>
                    </div>
                </form>
            </div>
            <div class="float-clear"> </div>
        </div>
        <div id="footer-bar">
            <footer>
                <a href="http://web.mit.edu/"><img id="mit-logo" src="images/mit_logo.png" alt="MIT Logo" /></a>
                <div style="text-align: center">
                    <p style="margin-top: 15px;">A <span class="strong">fresh</span> approach to <span class="strong">technical computing.</span></p>
                    <p>Copyright &copy; 2011 Alan Edelman, Jeff Bezanson, et al.</p>
                </div>
                <div class="float-clear"> </div>
            </footer>
        </div>
    </body>
</html>