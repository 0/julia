<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <title>Julia - A fresh approach to technical computing.</title>
        <link href="reset.css" rel="stylesheet" type="text/css" />
        <link href="styles.css" rel="stylesheet" type="text/css" />
        <link href="favicon.ico" rel="shortcut icon" />
        <link href="http://fonts.googleapis.com/css?family=Droid+Sans+Mono&v2" rel="stylesheet" type="text/css">
        <script type="text/javascript" src="jquery.js"></script>
        <script type="text/javascript" src="jquery.json.js"></script>
        <script type="text/javascript" src="jquery.autoresize.js"></script>
        <script type="text/javascript" src="d3.js"></script>
        <script>
            /*
                Some stuff to make the two columns extend to the bottom of the page.
            */

            // set the outer height of an element or group of elements
            function set_outer_height(selector, height)
            {
                $(selector).height(1);
                $(selector).height(height+1-$(selector).outerHeight(true));
            }
            
            // this function makes all of the columns the same height
            function set_column_heights() {
                // set the height of all the columns to the height of the longest one
                set_outer_height("#left-column", $(window).height());
                set_outer_height("#right-column", $(window).height());
                set_outer_height("#terminal-form", $(window).height());
            }
            
            // adjust the heights of the columns when the page loads or is resized
            $(document).ready(set_column_heights);
            $(window).resize(set_column_heights);
        </script>
        <script>
            /*
                Network Protol

                This needs to match the message
                types listed in ui/webserver/message_types.h.
            */

            // input messages (to julia)
            var MSG_INPUT_NULL              = 0;
            var MSG_INPUT_START             = 1;
            var MSG_INPUT_POLL              = 2;
            var MSG_INPUT_EVAL              = 3;

            // output messages (to the browser)
            var MSG_OUTPUT_NULL             = 0;
            var MSG_OUTPUT_READY            = 1;
            var MSG_OUTPUT_MESSAGE          = 2;
            var MSG_OUTPUT_OTHER            = 3;
            var MSG_OUTPUT_FATAL_ERROR      = 4;
            var MSG_OUTPUT_PARSE_ERROR      = 5;
            var MSG_OUTPUT_PARSE_INCOMPLETE = 6;
            var MSG_OUTPUT_PARSE_COMPLETE   = 7;
            var MSG_OUTPUT_EVAL_RESULT      = 8;
            var MSG_OUTPUT_EVAL_ERROR       = 9;
            var MSG_OUTPUT_PLOT             = 10;
        </script>
        <script>
            /*
                REPL implementation.
            */

            // indent string
            var indent_str = "    ";

            // how long we delay in ms before polling the server again
            var poll_interval = 200;

            // keep track of whether we are waiting for a message (and don't send more if we are)
            var waiting_for_response = false;

            // keep track of terminal history
            var input_history = [];
            var input_history_current = [""];
            var input_history_id = 0;
            var input_history_size = 100;

            // a queue of messages to be sent to the server
            var outbox_queue = [];

            // a queue of messages from julia to be processed
            var inbox_queue = [];

            // keep track of whether we have received a fatal message
            var dead = false;

            // reset the width of the terminal input
            function set_input_width() {
                // resize the input box (the -1 is for Internet Explorer)
                $("#terminal-input").width($("#terminal").width()-$("#prompt").width()-1);
            }

            // resize the input box when the window is resized
            $(window).resize(set_input_width);

            // jQuery extensions
            jQuery.fn.extend({
                // inset some text into a textarea at the cursor position
                insert_at_caret: function(str)
                {
                    // apply this function to all elements that match the selector
                    return this.each(function(i)
                    {
                        // if text is selected, then just replace it
                        if (document.selection)
                        {
                            // replace the selection with str
                            this.focus();
                            sel = document.selection.createRange();
                            sel.text = str;
                            this.focus();
                        }
                        else if (this.selectionStart || this.selectionStart == "0")
                        {
                            // replace the selection with str
                            var start_pos = this.selectionStart;
                            var end_pos = this.selectionEnd;
                            var scroll_top = this.scrollTop;
                            this.value = this.value.substring(0, start_pos)+str+this.value.substring(end_pos, this.value.length);
                            this.focus();
                            this.selectionStart = start_pos+str.length;
                            this.selectionEnd = start_pos+str.length;
                            this.scrollTop = scroll_top;
                        }
                        else
                        {
                            // just add str to the end
                            this.value += str;
                            this.focus();
                        }
                    })
                },

                // remove the character in a textarea before the cursor position or de-indent
                backspace_at_caret: function()
                {
                    // apply this function to all elements that match the selector
                    return this.each(function(i)
                    {
                        // if text is selected, then just delete it
                        if (document.selection)
                        {
                            this.focus();
                            sel = document.selection.createRange();
                            sel.text = "";
                            this.focus();
                        }
                        else if (this.selectionStart || this.selectionStart == "0")
                        {
                            // get the selection
                            var start_pos = this.selectionStart;
                            var end_pos = this.selectionEnd;
                            var scroll_top = this.scrollTop;

                            // check if nothing is selected
                            if (start_pos == end_pos)
                            {
                                // only backspace if we aren't at the beginning
                                if (start_pos > 0)
                                {
                                    // check if we are far enough that we might want to de-indent
                                    if (start_pos > indent_str.length-1)
                                    {
                                        // check if there is indentation right before the cursor
                                        if (this.value.substring(start_pos-indent_str.length, start_pos) == indent_str)
                                        {
                                            // delete the indentation
                                            this.value = this.value.substring(0, start_pos-indent_str.length)+this.value.substring(end_pos, this.value.length);
                                            this.selectionStart = start_pos-indent_str.length;
                                            this.selectionEnd = start_pos-indent_str.length;
                                        }
                                        else
                                        {
                                            // just delete the character before the cursor
                                            this.value = this.value.substring(0, start_pos-1)+this.value.substring(end_pos, this.value.length);
                                            this.selectionStart = start_pos-1;
                                            this.selectionEnd = start_pos-1;
                                        }
                                    }
                                    else
                                    {
                                        // just delete the character before the cursor
                                        this.value = this.value.substring(0, start_pos-1)+this.value.substring(end_pos, this.value.length);
                                        this.selectionStart = start_pos-1;
                                        this.selectionEnd = start_pos-1;
                                    }
                                }
                            }
                            else
                            {
                                // just delete the selection
                                this.value = this.value.substring(0, start_pos)+this.value.substring(end_pos, this.value.length);
                                this.selectionStart = start_pos;
                                this.selectionEnd = start_pos;
                            }

                            // focus the element and scroll it appropriately
                            this.focus();
                            this.scrollTop = scroll_top;
                        }
                    })
                },

                // insert a newline in a textarea at the cursor position and auto-indent
                newline_at_caret: function()
                {
                    // apply this function to all elements that match the selector
                    return this.each(function(i)
                    {
                        // determine the indentation for this line
                        var indent = "";
                        if (this.selectionStart || this.selectionStart == "0")
                        {
                            // determine the start of the indentation
                            var start_pos = this.selectionStart;
                            while (start_pos > 0)
                            {
                                if (this.value[start_pos-1] == "\n")
                                    break;
                                start_pos -= 1;
                            }

                            // determine the end of the indentation
                            var end_pos = start_pos;
                            while (end_pos < this.value.length)
                            {
                                if (this.value[end_pos] != " ")
                                    break;
                                end_pos += 1;
                            }

                            // get the indentation
                            indent = this.value.substring(start_pos, end_pos);
                        }

                        // insert a newline and auto-indent
                        $(this).insert_at_caret("\n"+indent);
                    })
                },
            });

            // escape html
            function escape_html(str)
            {
                // escape ampersands, angle brackets, spaces, tabs, and newlines
                return str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/ /g, "&nbsp;").replace(/\t/g, "&nbsp;&nbsp;&nbsp;&nbsp;").replace(/\n/g, "<br />");
            }

            // add to the terminal
            function add_to_terminal(data)
            {
                // update the html
                $("#terminal").append(data);

                // reset the size of the input box
                set_input_width();

                // scroll to the new data
                $("#terminal-form").prop("scrollTop", $("#terminal-form").prop("scrollHeight"));
            }

            // the first request
            function init_session()
            {
                // send a start message
                outbox_queue.push([MSG_INPUT_START]);
                process_outbox();
            }

            // check the server for data
            function poll()
            {
                // send a poll message
                outbox_queue.push([MSG_INPUT_POLL]);
                process_outbox();
            }

            // send the messages in the outbox
            function process_outbox()
            {
                // don't make new requests if we're waiting for old ones
                if (!waiting_for_response)
                {
                    // don't send a request if there are no messages
                    if (outbox_queue.length > 0)
                    {
                        // don't send any more requests while we're waiting for this one
                        waiting_for_response = true;

                        // send the messages
                        $.post("/repl.scgi", {"request": $.toJSON(outbox_queue)}, callback, "json");
                    }

                    // we sent all the messages at once so clear the outbox
                    outbox_queue = [];
                }
            }

            // process the messages in the inbox
            function process_inbox()
            {
                // iterate through the messages
                for (var id in inbox_queue)
                {
                    // MSG_OUTPUT_NULL
                    if (inbox_queue[id][0] == MSG_OUTPUT_NULL)
                    {
                        // do nothing
                    }

                    // MSG_OUTPUT_READY
                    if (inbox_queue[id][0] == MSG_OUTPUT_READY)
                    {
                        // remove the initializing message
                        $("#terminal").html("");

                        // enable input
                        $("#prompt").show();
                        $("#terminal-input").removeAttr("disabled");
                        $("#terminal-input").show();
                        $("#terminal-input").focus();

                        // reset the size of the input box
                        set_input_width();
                    }

                    // MSG_OUTPUT_MESSAGE
                    if (inbox_queue[id][0] == MSG_OUTPUT_MESSAGE)
                    {
                        // print the message
                        add_to_terminal("<span class=\"message\">"+escape_html(inbox_queue[id][1])+"</span><br /><br />");
                    }

                    // MSG_OUTPUT_OTHER
                    if (inbox_queue[id][0] == MSG_OUTPUT_OTHER)
                    {
                        // just print the output
                        add_to_terminal(escape_html(inbox_queue[id][1]));
                    }

                    // MSG_OUTPUT_FATAL_ERROR
                    if (inbox_queue[id][0] == MSG_OUTPUT_FATAL_ERROR)
                    {
                        // print the error message
                        add_to_terminal("<span class=\"error\">"+escape_html(inbox_queue[id][1])+"</span><br /><br />");

                        // stop processing new messages
                        dead = true;
                        inbox_queue = [];
                        outbox_queue = [];
                        break;
                    }

                    // MSG_OUTPUT_PARSE_ERROR
                    if (inbox_queue[id][0] == MSG_OUTPUT_PARSE_ERROR)
                    {
                        // get the input from form
                        var input = $("#terminal-input").val();

                        // input history
                        if (input.replace(/^\s+|\s+$/g, '') != "")
                            input_history.push(input);
                        if (input_history.length > input_history_size)
                            input_history = input_history.slice(input_history.length-input_history_size);
                        input_history_current = input_history.slice(0);
                        input_history_current.push("");
                        input_history_id = input_history_current.length-1;

                        // add the julia prompt and the input to the log
                        add_to_terminal("<span class=\"prompt\">julia&gt;&nbsp;</span>"+escape_html(input.replace(/\n/g, "\n       "))+"<br />");
                        
                        // print the error message
                        add_to_terminal("<span class=\"error\">"+escape_html(inbox_queue[id][1])+"</span><br /><br />");
                        
                        // clear the input field
                        $("#terminal-input").val("");

                        // re-enable the input field
                        $("#terminal-input").removeAttr("disabled");

                        // focus the input field
                        $("#terminal-input").focus();
                    }

                    // MSG_OUTPUT_PARSE_INCOMPLETE
                    if (inbox_queue[id][0] == MSG_OUTPUT_PARSE_INCOMPLETE)
                    {
                        // re-enable the input field
                        $("#terminal-input").removeAttr("disabled");

                        // focus the input field
                        $("#terminal-input").focus();

                        // add a newline for the user
                        $("#terminal-input").newline_at_caret();
                    }

                    // MSG_OUTPUT_PARSE_COMPLETE
                    if (inbox_queue[id][0] == MSG_OUTPUT_PARSE_COMPLETE)
                    {
                        // get the input from form
                        var input = $("#terminal-input").val();

                        // input history
                        if (input.replace(/^\s+|\s+$/g, '') != "")
                            input_history.push(input);
                        if (input_history.length > input_history_size)
                            input_history = input_history.slice(input_history.length-input_history_size);
                        input_history_current = input_history.slice(0);
                        input_history_current.push("");
                        input_history_id = input_history_current.length-1;

                        // add the julia prompt and the input to the log
                        add_to_terminal("<span class=\"prompt\">julia&gt;&nbsp;</span>"+escape_html(input.replace(/\n/g, "\n       "))+"<br />");
                        
                        // clear the input field
                        $("#terminal-input").val("");

                        // hide the prompt until the result comes in
                        $("#prompt").hide();
                    }

                    // MSG_OUTPUT_EVAL_RESULT
                    if (inbox_queue[id][0] == MSG_OUTPUT_EVAL_RESULT)
                    {
                        // print the result
                        if ($.trim(inbox_queue[id][1]) == "")
                            add_to_terminal("<br />");
                        else
                            add_to_terminal(escape_html(inbox_queue[id][1])+"<br /><br />");

                        // show the prompt
                        $("#prompt").show();

                        // re-enable the input field
                        $("#terminal-input").removeAttr("disabled");

                        // focus the input field
                        $("#terminal-input").focus();
                    }

                    // MSG_OUTPUT_EVAL_ERROR
                    if (inbox_queue[id][0] == MSG_OUTPUT_EVAL_ERROR)
                    {
                        // print the error
                        add_to_terminal("<span class=\"error\">"+escape_html(inbox_queue[id][1])+"</span><br /><br />");

                        // show the prompt
                        $("#prompt").show();

                        // re-enable the input field
                        $("#terminal-input").removeAttr("disabled");

                        // focus the input field
                        $("#terminal-input").focus();
                    }

                    // MSG_OUTPUT_PLOT
                    if (inbox_queue[id][0] == MSG_OUTPUT_PLOT)
                    {
                        // line plot
                        if (inbox_queue[id][1] == "line")
                        {
                            // get the data
                            var x_data = eval(inbox_queue[id][2]);
                            var y_data = eval(inbox_queue[id][3]);

                            // get the bounds on the data
                            var x_min = eval(inbox_queue[id][4]);
                            var x_max = eval(inbox_queue[id][5]);
                            var y_min = eval(inbox_queue[id][6]);
                            var y_max = eval(inbox_queue[id][7]);

                            // construct the data for D3
                            var data = d3.range(x_data.length).map(function(i) {
                                return {x: x_data[i], y: y_data[i]};
                            });

                            // local variables
                            var w = 450,
                                h = 275,
                                p = 40,
                                x = d3.scale.linear().domain([x_min, x_max]).range([0, w]),
                                y = d3.scale.linear().domain([y_min-(y_max-y_min)*0.1, y_max+(y_max-y_min)*0.1]).range([h, 0]),
                                xticks = x.ticks(8),
                                yticks = y.ticks(8);

                            // create an SVG canvas and a group to represent the plot area
                            var vis = d3.select("#terminal")
                              .append("svg")
                                .data([data])
                                .attr("width", w+p*2)
                                .attr("height", h+p*2)
                              .append("g")
                                .attr("transform", "translate("+String(p)+","+String(p)+")");

                            // vertical tics
                            var vrules = vis.selectAll("g.vrule")
                                .data(xticks)
                              .enter().append("g")
                                .attr("class", "vrule");

                            // horizontal tics
                            var hrules = vis.selectAll("g.hrule")
                                .data(yticks)
                              .enter().append("g")
                                .attr("class", "hrule");

                            // vertical lines
                            vrules.filter(function(d) { return (d != 0); }).append("line")
                                .attr("x1", x)
                                .attr("x2", x)
                                .attr("y1", 0)
                                .attr("y2", h - 1);

                            // horizontal lines
                            hrules.filter(function(d) { return (d != 0); }).append("line")
                                .attr("y1", y)
                                .attr("y2", y)
                                .attr("x1", 0)
                                .attr("x2", w + 1);

                            // x-axis labels
                            vrules.append("text")
                                .attr("x", x)
                                .attr("y", h + 10)
                                .attr("dy", ".71em")
                                .attr("text-anchor", "middle")
                                .attr("fill", "#444444")
                                .text(x.tickFormat(10));

                            // y-axis labels
                            hrules.append("text")
                                .attr("y", y)
                                .attr("x", -5)
                                .attr("dy", ".35em")
                                .attr("text-anchor", "end")
                                .attr("fill", "#444444")
                                .text(y.tickFormat(10));

                            // y-axis
                            var vrules2 = vis.selectAll("g.vrule2")
                                .data(xticks)
                              .enter().append("g")
                                .attr("class", "vrule2");

                            // x-axis
                            var hrules2 = vis.selectAll("g.hrule2")
                                .data(yticks)
                              .enter().append("g")
                                .attr("class", "hrule2");
                            
                            // y-axis line
                            vrules2.filter(function(d) { return (d == 0); }).append("line")
                                .attr("class", "axis")
                                .attr("x1", x)
                                .attr("x2", x)
                                .attr("y1", 0)
                                .attr("y2", h - 1);
                            
                            // x-axis line
                            hrules2.filter(function(d) { return (d == 0); }).append("line")
                                .attr("class", "axis")
                                .attr("y1", y)
                                .attr("y2", y)
                                .attr("x1", 0)
                                .attr("x2", w + 1);

                            // actual plot curve
                            vis.append("path")
                                .attr("class", "line")
                                .attr("d", d3.svg.line()
                                .x(function(d) { return x(d.x); })
                                .y(function(d) { return y(d.y); }));
                            
                            // newline
                            add_to_terminal("<br />");

                            // scroll to the new plot
                            $("#terminal-form").prop("scrollTop", $("#terminal-form").prop("scrollHeight"));
                        }
                    }
                }

                // we handled all the messages so clear the inbox
                inbox_queue = [];
            }
            
            // called when the server has responded
            function callback(data, textStatus, jqXHR)
            {
                // if we are dead, don't keep polling the server
                if (dead)
                    return;

                // allow sending new messages
                waiting_for_response = false;

                // add the messages to the inbox
                inbox_queue = inbox_queue.concat(data);

                // process the inbox
                process_inbox();

                // send any new messages
                process_outbox();

                // poll the server again shortly
                setTimeout(poll, poll_interval);
            }

            // called on page load
            $(document).ready(function()
            {
                // apply the autoresize plugin to the textarea
                $("#terminal-input").autoResize({ animate: false, maxHeight: 1000, onAfterResize: function() {
                    setTimeout(function() { $("#terminal-form").prop("scrollTop", $("#terminal-form").prop("scrollHeight")); }, 100);
                    set_input_width();
                } });
                
                // clear the textarea in case the browser decides to pre-populate it
                $("#terminal-input").val("");

                // record the cursor position when the user clicks anywhere
                var mouse_x, mouse_y;
                $(window).mousedown(function(evt) {
                    mouse_x = evt.pageX;
                    mouse_y = evt.pageY;
                });

                // focus the terminal input when the user clicks on the terminal (but not drags)
                $("#terminal-form").click(function(evt) {
                    if ((mouse_x-evt.pageX)*(mouse_x-evt.pageX)+(mouse_y == evt.pageY)*(mouse_y == evt.pageY) < 4)
                        $("#terminal-input").focus();
                });

                // hook keyboard events for the input field
                $("#terminal-input").keydown(function(evt)
                {
                    // determine which key was pressed
                    switch (evt.keyCode)
                    {
                        case 8:
                            // user pressed the backspace key -- make sure the terminal input was enabled
                            if (!$("#terminal-input").attr("disabled"))
                            {
                                // backspace
                                $("#terminal-input").backspace_at_caret();
                                $("#terminal-form").prop("scrollTop", $("#terminal-form").prop("scrollHeight"));
                            }
                            return false;

                        case 9:
                            // user pressed the tab key -- make sure the terminal input was enabled
                            if (!$("#terminal-input").attr("disabled"))
                            {
                                // indent
                                $("#terminal-input").insert_at_caret(indent_str);
                                $("#terminal-form").prop("scrollTop", $("#terminal-form").prop("scrollHeight"));
                            }
                            return false;

                        case 38:
                            // user pressed the up key -- make sure the terminal input was enabled
                            if (!$("#terminal-input").attr("disabled"))
                            {
                                // terminal input history
                                input_history_current[input_history_id] = $("#terminal-input").val();
                                input_history_id -= 1;
                                if (input_history_id < 0)
                                    input_history_id = 0;
                                $("#terminal-input").val(input_history_current[input_history_id]);
                                $("#terminal-form").prop("scrollTop", $("#terminal-form").prop("scrollHeight"));
                            }
                            return false;

                        case 40:
                            // user pressed the down key -- make sure the terminal input was enabled
                            if (!$("#terminal-input").attr("disabled"))
                            {
                                // terminal input history
                                input_history_current[input_history_id] = $("#terminal-input").val();
                                input_history_id += 1;
                                if (input_history_id > input_history_current.length-1)
                                    input_history_id = input_history_current.length-1;
                                $("#terminal-input").val(input_history_current[input_history_id]);
                                $("#terminal-form").prop("scrollTop", $("#terminal-form").prop("scrollHeight"));
                            }
                            return false;

                        case 13:
                            // user pressed the enter key -- make sure the terminal input was enabled
                            if (!$("#terminal-input").attr("disabled"))
                            {
                                // disable the terminal input
                                $("#terminal-input").attr("disabled", "disabled");

                                // get the input
                                var input = $("#terminal-input").val();
                                
                                // send the input to the server via AJAX
                                outbox_queue.push([MSG_INPUT_EVAL, input]);
                                process_outbox();
                            }

                            // prevent the form from actually submitting
                            return false;
                    }
                });
                
                // scroll to the input field
                $("#terminal-form").prop("scrollTop", $("#terminal-form").prop("scrollHeight"));

                // start polling the server
                init_session();
            });
        </script>
    </head>
    <body>
        <div id="main">
            <div id="left-column">
                <a href="/" class="current-page"><img class="bullet" src="images/bullet.png" alt="" /> Interactive Prompt</a>
                <a href="http://github.com/JuliaLang/julia/wiki"><img class="bullet" src="images/bullet.png" alt="" /> Documentation</a>
                <a href="http://julialang.org/"><img class="bullet" src="images/bullet.png" alt="" /> Julia Home</a>
            </div>
            <div id="right-column">
                <form id="terminal-form">
                    <div id="terminal"><span class="message">&lt;initializing&gt;</span></div>
                    <div>
                        <div id="prompt">julia&gt;&nbsp;</div>
                        <textarea id="terminal-input" spellcheck="false" rows="1" cols="20" disabled="disabled" /></textarea>
                    </div>
                </form>
            </div>
            <div class="float-clear"> </div>
        </div>
    </body>
</html>
